//import com.github.rjeschke.txtmark.*
import org.apache.tools.ant.filters.*

apply plugin: "base"
apply plugin:  "groovy"
apply plugin:  "maven"

apply from: "versions.gradle"
apply plugin: "edu.holycross.shot.concmd"

if (hasProperty('conf')) {
    System.err.print "Using configuration data from ${conf}"
    File confFile = new File(conf)
    if (! confFile.exists()) {
        throw new Exception("No configuration file ${conf} found.")
    } else {
        apply from: conf
    }

} else {
    File confFile = new File("conf.gradle")
    if (! confFile.exists()) {
        throw new Exception("No configuration file ${confFile} found.")
    } else {
        println "Using default configuration in 'conf.gradle'"
        apply from: "conf.gradle"
    }
}

if (hasProperty('pub')) {
    System.err.print "Using configuration data from ${pub}"
    File confFile = new File(pub)
    if (! confFile.exists()) {
        throw new Exception("No publication configuration file ${pub} found.")
    } else {
        apply from: pub
    }

} else {
    File confFile = new File("pub.gradle")
    if (! confFile.exists()) {
        throw new Exception("No publication configuration file ${confFile} found.")
    } else {
        println "Using default configuration in 'pub.gradle'"
        apply from: "pub.gradle"
    }
}


group = "edu.holycross.shot"
version = '1.2.0'

ext {
  specversion = "1.0.2"
}

buildscript {
  repositories {
    mavenCentral()
    maven {
  	  url "http://beta.hpcc.uh.edu/nexus/content/groups/public"
  	}
  }
  dependencies {
    classpath group: "edu.holycross.shot", name: "concmd", version: "1.0.3", classifier: "all"
  }
}


repositories {
    mavenCentral()
    maven {
        url "http://beta.hpcc.uh.edu/nexus/content/groups/public"
    }
}

dependencies {
    compile "org.codehaus.groovy:groovy-all:${versionMap['groovy']}"
    compile group: 'edu.harvard.chs', name : 'cite' , version: versionMap["cite"]
    compile group: 'commons-io', name: 'commons-io', version: versionMap['commonsio']

    compile group: 'net.sf.saxon', name: 'saxon-dom', version: versionMap["saxon"]

    testCompile "junit:junit:${versionMap['junit']}"
    testCompile "xmlunit:xmlunit:${versionMap['xmlunit']}"
    testCompile group: 'org.concordion', name : 'concordion', version: versionMap['concordion']
}



/*
configurations {
    schemas {
        description = 'Manage schemas'
        transitive = true
    }
}

dependencies {
  compile group: 'commons-io', name: 'commons-io', version: commonsioversion
  compile group: 'net.sf.saxon', name: 'saxon-dom', version: '8.7'

  testCompile 'org.concordion:concordion:1.4.4'
  testCompile group :'xmlunit', name: 'xmlunit', version: xmlunitversion
  compile group: 'com.thaiopensource', name:'jing', version: jingversion
  //    groovy group:'org.iso_relax.verifier.jaxp.validation', name:'isorelax-jaxp-bridge', version:'1.0'



  schemas group: 'edu.harvard.chs', name: 'cite', version: versionMap["cite"], classifier: 'schemas', ext: 'zip'

}

task vmap {
  description = "Prints out version info for key dependencies."
}
vmap.doLast {
  println "\nDependencies in hocuspocus ${version}:"
  versionMap.keySet().sort().each { k ->
    print k
    Integer spaces = 15 - k.size()
    Integer idx = 0
    while(idx < spaces) {
      print " "
      idx++
    }
    println versionMap[k]
  }
  println ""
}*/

/*
task checkOutSchemas {
  description = ""
  doLast {
    configurations.schemas.files.each { f ->
      println "SCHEMA DEPENDENCY: " + f.name
      FileTree schemaTree = zipTree(f)
      schemaTree.each { s ->
	println "${s} from ${s.getClass()}"
      }
    }
  }
}


task copySchemas(dependsOn: checkOutSchemas, type: Copy) {
    from 'src/schemas'
    into 'build/schemas'
}
*/

/*
compileGroovy.dependsOn(copySchemas)
*/

uploadArchives {
  repositories.mavenDeployer {
    repository(url: nexusRepo) {
      authentication (userName: nexusUser, password: nexusPassword)
    }
  }
}

  task cpSpecs(type: Copy) {
    description "Copies all source for concordion tests to build area."
    from "specs"
    into "${buildDir}/specs"
  }

task prepareConc(type: edu.holycross.shot.ConcMdTask, dependsOn: cpSpecs) {
      description "Converts source MD to HTML"
      from "specs/md"
      into "${buildDir}/specs/md"
  }


  task addVersion(){
    description "Adds project and dependency versions to list of filterable tokens"
  }

  addVersion.doLast {
    tokenMap["version"] = version
    tokenMap["specversion"] = specversion
    StringBuilder deps = new StringBuilder()
    versionMap.keySet().sort().each { k ->
      deps.append("<tr><td>${k}</td><td>${versionMap[k]}</td></tr>")
    }
    tokenMap["deps"] = deps.toString()
  }

  task conc(type: Copy, dependsOn: [test, addVersion]) {
    description "Filter-copies concordion output for final formatting"
    from "${buildDir}/concordion-unfiltered"
    into "${buildDir}/concordion-formatted"
    filter(ReplaceTokens, tokens: tokenMap)
  }
  conc.doLast {
    println "\nFormatted output is in ${buildDir}/concordion-formatted"
  }

  test.dependsOn prepareConc
  test {
    systemProperties 'concordion.output.dir': file("${buildDir}/concordion-unfiltered")
  }
  test {
    if (project.hasProperty("abbr")) {
      systemProperty "shortrun", abbr
    } else {
      systemProperty "shortrun", "n"
    }

  }

  sourceSets {
      main {
          java {
              srcDir 'src'
          }
          resources {
              srcDir 'src'
          }
      }
      test {
          java {
              srcDir "specs/java"
          }
          resources {
            srcDir "${buildDir}/specs/md"
          }
      }
  }
